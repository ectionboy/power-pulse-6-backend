{
	"openapi": "3.0.1",
	"info": {
		"version": "1.1.0",
		"title": "Team project - Power Pulse",
		"description": "Team 6",
		"license": {
			"name": "MIT",
			"url": "https://opensource.org/licenses/MIT"
		}
	},
	"consumes": ["application/json", "multipart/form-data"],
	"produces": ["application/json"],
	"servers": [
		{ "url": "http://localhost:3000/api" },
		{ "url": "https://power-pulse-6-backend.onrender.com/api" }
	],
	"tags": [
		{
			"name": "Auth",
			"description": "Authorization endpoints"
		},
		        {
            "name": "Users",
            "description": "User's basic information"
        },
        {
            "name": "Profiles",
            "description": "User's sport profile"
        },
		{
			"name": "Diary",
			"description": "Diary endpoints"
		},
		{
			"name": "Food",
			"description": "Food endpoints"
		},
		{
			"name": "Training",
			"description": "Training endpoints"
		}
	],

	"paths": {
		"/auth/register": {
			"post": {
				"tags": ["Auth"],
				"summary": "User registration",
				"parameters": [],
				"requestBody": {
					"description": "Registration's object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegistrationRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/registrationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {}
					},
					"409": {
						"description": "Provided email already exists",
						"content": {}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"tags": ["Auth"],
				"summary": "User login",
				"parameters": [],
				"requestBody": {
					"description": "Login object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					},
					"401": {
						"description": "Email or password invalid",
						"content": {}
					},
					"409": {
						"description": "Provided email already exists",
						"content": {}
					}
				}
			}
		},
		"/auth/current": {
			"get": {
				"tags": ["Auth"],
				"summary": "Current user information",
				"parameters": [],
				"security": [{ "Bearer": [] }],
				"requestBody": {},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CurrentUserResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {}
					}
				}
			}
		},
		"/auth/logout": {
			"post": {
				"tags": ["Auth"],
				"summary": "Logout user",
				"parameters": [],
				"security": [{ "Bearer": [] }],
				"requestBody": {
				},
				"responses": {
					"204": {
                        "description": "No content (Operation successful)"
                    }
				}
			}
		},
		"/users": {
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user's name",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "description": "User's update object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
		 "/users/avatars": {
            "patch": {
                "tags": [
                    "Users"
                ],
                "summary": "Update user's avatar",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "description": "User's avatar file",
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/UpdateUserAvatarRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UpdateUserAvatarResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
		"/profiles": {
            "get": {
                "tags": [
                    "Profiles"
                ],
                "summary": "User's profile",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfileResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Profiles"
                ],
                "summary": "User's profile",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "requestBody": {
                    "description": "Profile object",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserProfileRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Operation successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserProfileResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
		"/profiles/targets": {
            "get": {
                "tags": [
                    "Profiles"
                ],
                "summary": "User's traning targets",
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Operation successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserTargetsResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        },
		"/food": {
			"get": {
				"tags": ["Food"],
				"summary": "Get all foods",
				"parameters": [
					{
						"name": "page",
						"in": "path",
						"schema": {
							"type": "integer",
							"example": "1"
						}
					},
					{
						"name": "limit",
						"description": "Limit of elements per page",
						"in": "path",
						"schema": {
							"type": "integer",
							"example": "16"
						}
					}
				],
				"security": [{ "Bearer": [] }],
				"requestBody": {},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FoodResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FoodResponse404"
								}
							}
						}
					}
				}
			}
		},
		"/food/categories": {
			"get": {
				"tags": ["Food"],
				"summary": "Get all categories",
				"parameters": [],
				"security": [{ "Bearer": [] }],
				"requestBody": {},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CategoriesFoodResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CategoriesFoodResponse404"
								}
							}
						}
					}
				}
			}
		}

	},
	"components": {
		"schemas": {
			"RegistrationRequest": {
				"type": "object",
				"required": ["email", "password", "name"],
				"properties": {
					"name": {
						"type": "string",
						"description": "User's name",
						"example": "Oleks"
					},
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email",
						"pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/"
					},
					"password": {
						"type": "string",
						"description": "User's password",
						"minLength": "6",
						"maxLength": "15",
						"example": "qwerty123"
					}
				}
			},
			"registrationResponse": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "User's name",
						"example": "Oleks"
					},
					"email": {
                        "type": "string",
                        "required": true,
                        "description": "User's email",
                        "pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/",
                        "example": "oleks@gmail.com"
                    },
					"avatarURL": {
						"type": "string",
						"description": "User's avatar URL",
						"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=250"
					}
				}
			},
			"LoginRequest": {
				"type": "object",
				"required": ["email", "password"],
				"properties": {
					"email": {
						"type": "string",
						"required": true,
						"description": "User's email",
						"format": "email",
						"pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/",
						"example": "oleks@gmail.com"
					},
					"password": {
						"type": "string",
						"description": "User's password",
						"minLength": "6",
						"maxLength": "15",
						"example": "qwerty123"
					}
				}
			},
			"LoginResponse": {
				"type": "object",
				"properties": {
                    "token": {
                        "type": "string",
                        "required": true,
                        "description": "User's authentitication token"
                    },
                    "user": {
                        "type": "object",
                        "properties": { 
                            "name": {
                                "type": "string",
                                "description": "User's display name",
                                "example": "Oleks"
                            },
                            "email": {
                                "type": "string",
                                "required": true,
                                "description": "User's email",
                                "pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/",
                                "example": "oleks@gmail.com"
                            },
                            "avatarURL": {
							"type": "string",
							"description": "User's avatar URL",
							"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=250"
							},
                            "createdAt": {
                                "type":"string",
                                "description": "Date of creation",
                                "format": "date"
                            }
                        }
					}
				}
			},

			"CurrentUserResponse": {
                "type": "object",
                "properties": { 
                            "name": {
                                "type": "string",
                                "description": "User's display name",
                                "example": "Oleks"
                            },
                            "email": {
                                "type": "string",
                                "required": true,
                                "description": "User's email",
                                "pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/",
                                "example": "oleks@gmail.com"
                            },
                            "avatarURL": {
							"type": "string",
							"description": "User's avatar URL",
							"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=250"
							},
                            "createdAt": {
                                "type":"string",
                                "description": "Date of creation",
                                "format": "date"
                            }
                }
            },
			"UpdateUserRequest": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "User's display name"
                    }
                }
            },
			"UpdateUserResponse": {
                "type": "object",
                "properties": {
                    "_id": {
                        "type": "string"
                    },
                    "name": {
                    	"type": "string",
                    	"description": "User's display name",
                        "example": "Oleks"
                    },
                    "email": {
                        "type": "string",
                        "required": true,
                        "description": "User's email",
                        "pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/",
                        "example": "oleks@gmail.com"
                    },
                    "avatarURL": {
						"type": "string",
						"description": "User's avatar URL",
						"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=250"
					}
                }
            },
			"UpdateUserAvatarRequest": {
                "type": "object",
                "properties": {
                    "avatar": {
                        "type": "string",
                        "format": "binary"
                    }
                }
            },
            "UpdateUserAvatarResponse": {
                "type": "object",
                "properties": {
                    "avatarURL": {
						"type": "string",
						"description": "User's avatar URL",
						"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=250"
					}
                }
            },
			"UserProfileRequest": {
                "type": "object",
                "required": [
                    "height",
                    "currentWeight",
                    "desiredWeight",
                    "sex",
                    "blood",
                    "levelActivity",
                    "birthday"
                ],
                "properties": {
                    "height": {
                        "type": "number",
                        "description": "User's height",
                        "minimum": 150,
                        "maximum": 210
                    },
                    "currentWeight": {
                        "type": "number",
                        "description": "User's weight",
                        "minimum": 40,
                        "maximum": 160
                    },
                    "desiredWeight": {
                        "type": "number",
                        "description": "User's target weihgt",
                        "minimum": 40,
                        "maximum": 160
                    },
                    "sex": {
                        "type": "string",
                        "description": "User's gender",
                        "enum": [
                            "male",
                            "female"
                        ]
                    },
                    "blood": {
                        "type": "number",
                        "description": "User's blood type",
                        "enum": [
                            1,
                            2,
                            3,
                            4
                        ]
                    },
                    "levelActivity": {
                        "type": "number",
                        "description": "User's blood type",
                        "enum": [
                            1,
                            2,
                            3,
                            4,
                            5
                        ]
                    },
                    "birthday": {
                        "type": "date",
                        "description": "User's birthday",
                        "format": "date"
                    }
                }
            },
			"UserProfileResponse": {
                "anyOf": [
                    {
                        "type": "object",
                        "properties": {
                            "_id": {
                                "type": "string"
                            },
                            "height": {
                                "type": "number",
                                "description": "User's height"
                            },
                            "currentWeight": {
                                "type": "number",
                                "description": "User's weight"
                            },
                            "desiredWeight": {
                                "type": "number",
                                "description": "User's target weihgt"
                            },
                            "sex": {
                                "type": "string",
                                "description": "User's gender",
                                "enum": [
                                    "male",
                                    "female"
                                ]
                            },
                            "blood": {
                                "type": "number",
                                "description": "User's blood type",
                                "enum": [
                                    1,
                                    2,
                                    3,
                                    4
                                ]
                            },
                            "levelActivity": {
                                "type": "number",
                                "description": "User's blood type",
                                "enum": [
                                    1,
                                    2,
                                    3,
                                    4,
                                    5
                                ]
                            },
                            "birthday": {
                                "type": "date",
                                "description": "User's birthday",
                                "format": "date"
                            },
							"bmr": {
                                "type": "number",
                                "description": "Callories of the user"
                            },
                            "owner": {
                                "type": "object",
                                "$ref": "#/components/schemas/UpdateUserResponse"
                            }
                        }
                    },
                    {
                        "type": "null"
                    }
                ]
            },
			"UserTargetsResponse": {
                "type": "object",
                "properties": {
                    "targetBmr": {
                        "type": "number",
                        "description": "User's target callories"
                    },
                    "targetTime": {
                        "type": "number",
                        "description": "User's target traning time"
                    }
                }
            },
			"FoodItemSchema": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string",
						"description": "Id",
						"example": "5d5169111111173622ff5773"
					},
					"weight": {
						"type": "integer",
						"description": "Weight",
						"example": "100"
					},
					"calories": {
						"type": "integer",
						"description": "Calories",
						"example": "340"
					},
					"category": {
						"type": "integer",
						"description": "Category",
						"example": "dairy"
					},
					"title": {
						"type": "integer",
						"description": "Title",
						"example": "Danbo cheese"
					},
					"groupBloodNotAllowed": {
						"type": "object",
						"properties": {
							"1":{
								"type":"boolean",
								"example": "true"
							},
							"2":{
								"type":"boolean",
								"example": "true"
							},
							"3":{
								"type":"boolean",
								"example": "false"
							},
							"4":{
								"type":"boolean",
								"example": "false"
							}
						}
					}
				}
			},
			"FoodResponse": {
				"type": "object",
				"properties": {
					"total": {
						"type": "integer",
						"description": "Number of foods",
						"example": "2621"
					},
					"page": {
						"type": "integer",
						"description": "Current page",
						"example": "1"
					},
					"limit": {
						"type": "integer",
						"description": "Current limit of elements per page",
						"example": "1"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FoodItemSchema"
						}
					}
				}
			},
			"FoodResponse404": {
				"type": "object",
				"properties": {
					"message": {
						"type":"string",
						"example":"Foods not found"
					}
				}
			},
			"CategoriesFoodResponse": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string",
						"description": "Id",
						"example": "5d5169111111173622ff5773"
					},
					"label": {
						"type": "integer",
						"description": "Label",
						"example": "meat"
					}
				}
			},
			"CategoriesFoodResponse404": {
				"type": "object",
				"properties": {
					"message": {
						"type":"string",
						"example":"Categories not found"
					}
				}
			},
			"UnauthorizedResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type":"string",
						"example":"Unauthorized"
					}
				}
			}
		},
		"securitySchemes": {
			"Bearer": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		} 
	}
}

