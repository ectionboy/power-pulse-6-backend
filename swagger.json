{
	"openapi": "3.0.1",
	"info": {
		"version": "1.1.0",
		"title": "Team project - Power Pulse",
		"description": "Team 6",
		"license": {
			"name": "MIT",
			"url": "https://opensource.org/licenses/MIT"
		}
	},
	"consumes": ["application/json", "multipart/form-data"],
	"produces": ["application/json"],
	"servers": [
		{ "url": "http://localhost:3000/api" },
		{ "url": "https://power-pulse-6-backend.onrender.com/api" }
	],
	"tags": [
		{
			"name": "Auth",
			"description": "Authorization endpoints"
		},
		{
			"name": "Users",
			"description": "User's basic information"
		},
		{
			"name": "Profiles",
			"description": "User's sport profile"
		},
		{
			"name": "Diary",
			"description": "Diary endpoints"
		},
		{
			"name": "Food",
			"description": "Food endpoints"
		},
		{
			"name": "Training",
			"description": "Training endpoints"
		},
        {
            "name": "Statistics",
            "description": "Application statistics"
        }
	],

	"paths": {
		"/auth/register": {
			"post": {
				"tags": ["Auth"],
				"summary": "User registration",
				"parameters": [],
				"requestBody": {
					"description": "Registration's object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/RegistrationRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/registrationResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad request (invalid request body)",
						"content": {}
					},
					"409": {
						"description": "Provided email already exists",
						"content": {}
					}
				}
			}
		},
		"/auth/login": {
			"post": {
				"tags": ["Auth"],
				"summary": "User login",
				"parameters": [],
				"requestBody": {
					"description": "Login object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LoginRequest"
							}
						}
					}
				},
				"responses": {
					"201": {
						"description": "Successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/LoginResponse"
								}
							}
						}
					},
					"401": {
						"description": "Email or password invalid",
						"content": {}
					},
					"409": {
						"description": "Provided email already exists",
						"content": {}
					}
				}
			}
		},
		"/auth/current": {
			"get": {
				"tags": ["Auth"],
				"summary": "Current user information",
				"parameters": [],
				"security": [{ "Bearer": [] }],
				"requestBody": {},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CurrentUserResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {}
					}
				}
			}
		},
		"/auth/logout": {
			"post": {
				"tags": ["Auth"],
				"summary": "Logout user",
				"parameters": [],
				"security": [{ "Bearer": [] }],
				"requestBody": {},
				"responses": {
					"204": {
						"description": "No content (Operation successful)"
					}
				}
			}
		},
		"/users": {
			"patch": {
				"tags": ["Users"],
				"summary": "Update user's name",
				"security": [
					{
						"Bearer": []
					}
				],
				"requestBody": {
					"description": "User's update object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UpdateUserRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Operation successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateUserResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not found"
					}
				}
			}
		},
		"/users/avatars": {
			"patch": {
				"tags": ["Users"],
				"summary": "Update user's avatar",
				"security": [
					{
						"Bearer": []
					}
				],
				"requestBody": {
					"description": "User's avatar file",
					"required": true,
					"content": {
						"multipart/form-data": {
							"schema": {
								"$ref": "#/components/schemas/UpdateUserAvatarRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Operation successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UpdateUserAvatarResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not found"
					}
				}
			}
		},
		"/profiles": {
			"get": {
				"tags": ["Profiles"],
				"summary": "User's profile",
				"security": [
					{
						"Bearer": []
					}
				],
				"responses": {
					"200": {
						"description": "Operation successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserProfileResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not found"
					}
				}
			},
			"put": {
				"tags": ["Profiles"],
				"summary": "User's profile",
				"security": [
					{
						"Bearer": []
					}
				],
				"requestBody": {
					"description": "Profile object",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/UserProfileRequest"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "Operation successful",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UserProfileResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not found"
					}
				}
			}
		},
		"/diary/{userId}/{date}": {
			"get": {
			  "tags": [
				"Diary"
			  ],
			  "summary": "Get Diary by Date",
			  "description": "Retrieve the diary entries for a specific user and date.",
			  "operationId": "getDiaryByDate",
			  "security": [{ "Bearer": [] }],
			  "parameters": [
				{
				  "name": "userId",
				  "in": "path",
				  "required": true,
				  "description": "Unique identifier of the user",
				  "type": "string"
				},
				{
				  "name": "date",
				  "in": "path",
				  "required": true,
				  "description": "The date for which diary entries are requested in YYYY-MM-DD format",
				  "type": "string",
				  "format": "date"
				}
			  ],
			  "responses": {
				"200": {
				  "description": "Diary entries for the specified date",
				  "schema": {
					"$ref": "#/components/schemas/DiaryResponse"
				  }
				},
				"401": {
				  "description": "Unauthorized - Authentication is required"
				},
				"403": {
				  "description": "Access Denied - User is not authorized to view this diary entry"
				},
				"404": {
				  "description": "Not Found - Diary entries not found for the specified user and date"
				}
			  }
			}
		  },
		  "/diary/add-entry": {
			"post": {
			  "tags": [
				"Diary"
			  ],
			  "summary": "Add Diary Entry",
			  "description": "Add a new product or exercise entry to the user's diary.",
			  "operationId": "addDiaryEntry",
			  "security": [{ "Bearer": [] }],
			  "parameters": [
				{
				  "in": "body",
				  "name": "body",
				  "description": "Diary entry to add (product or exercise)",
				  "required": true,
				  "schema": {
					"$ref": "#/components/schemas/DiaryEntryRequest"
				  }
				}
			  ],
			  "requestBody": {
					"description": "Diary entry to add (product or exercise)",
					"required": true,
					"content": {
						"application/json": {}
					}
				},
			  "responses": {
				"200": {
				  "description": "Diary entry successfully added"
				},
				"400": {
				  "description": "Bad Request - Invalid request format"
				},
				"401": {
				  "description": "Unauthorized - Authentication is required"
				},
				"403": {
				  "description": "Access Denied - User is not authorized to add entry"
				}
			  }
			}
		  },
"/diary/delete-entry/{userId}/{date}/{entryId}": {
    "delete": {
      "tags": ["Diary"],
      "summary": "Delete Diary Entry",
      "description": "Delete a product or exercise entry from the user's diary.",
      "operationId": "deleteDiaryEntry",
      "security": [{"Bearer": []}],
      "parameters": [
        {
          "in": "path",
          "name": "userId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The ID of the user"
        },
        {
          "in": "path",
          "name": "date",
          "required": true,
          "schema": {
            "type": "string",
            "format": "date"
          },
          "description": "The date of the diary entry"
        },
        {
          "in": "path",
          "name": "entryId",
          "required": true,
          "schema": {
            "type": "string"
          },
          "description": "The ID of the diary entry to delete"
        }
      ],
      "responses": {
        "204": {
          "description": "Diary entry successfully deleted"
        },
        "400": {
          "description": "Bad Request - Invalid request format"
        },
        "401": {
          "description": "Unauthorized - Authentication is required"
        },
        "403": {
          "description": "Access Denied - User is not authorized to delete entry"
        },
        "404": {
          "description": "Not Found - Diary entry not found"
        }
      }
    }
  },
		
		"/food": {
			"get": {
				"tags": ["Food"],
				"summary": "Get all foods",
				"parameters": [
					{
						"name": "page",
						"in": "query",
						"schema": {
							"type": "integer",
							"example": "1"
						}
					},
					{
						"name": "limit",
						"description": "Limit of elements per page",
						"in": "query",
						"schema": {
							"type": "integer",
							"example": "16"
						}
					},
					{
						"name": "category",
						"description": "Category of food",
						"in": "query",
						"schema": {
							"type": "string",
							"example": "vegetables-and-herbs"
						}
					},
					{
						"name": "groupBloodNotAllowed",
						"description": "Blood group allowed filter",
						"in": "query",
						"schema": {
							"type": "string",
							"example": "not-recommended"
						}
					},
					{
						"name": "search",
						"description": "Search",
						"in": "query",
						"schema": {
							"type": "string",
							"example": "Bonduelle"
						}
					}
				],
				"security": [{ "Bearer": [] }],
				"requestBody": {},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FoodResponse"
								}
							}
						}
					},
					"400": {
						"description": "Bad Request",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CategoriesFoodResponse400"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/FoodResponse404"
								}
							}
						}
					}
				}
			}
		},
		"/food/categories": {
			"get": {
				"tags": ["Food"],
				"summary": "Get all categories",
				"parameters": [],
				"security": [{ "Bearer": [] }],
				"requestBody": {},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CategoriesFoodResponse"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/UnauthorizedResponse"
								}
							}
						}
					},
					"404": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CategoriesFoodResponse404"
								}
							}
						}
					}
				}
			}
		},
		"/exercises": {
			"get": {
				"tags": ["Training"],
				"summary": "Returns all exercises",
				"parameters": [
					{
						"name": "bodyPart",
						"in": "query",
						"description": "Choose body part",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"shoulders",
								"waist",
								"back",
								"upper arms",
								"upper legs",
								"cardio",
								"chest",
								"neck",
								"lower arms",
								"lower legs"
							]
						}
					},
					{
						"name": "equipment",
						"in": "query",
						"description": "Choose equipment",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"assisted",
								"band",
								"barbell",
								"body weight",
								"bosu ball",
								"cable",
								"dumbbell",
								"elliptical machine",
								"ez barbell",
								"hammer",
								"kettlebell",
								"leverage machine",
								"medicine ball",
								"olympic barbell",
								"resistance band",
								"roller",
								"rope",
								"skierg machine",
								"sled machine",
								"smith machine",
								"stability ball",
								"stationary bike",
								"stepmill machine",
								"tire",
								"trap bar",
								"upper body ergometer",
								"weighted",
								"wheel roller"
							]
						}
					},
					{
						"name": "target",
						"in": "query",
						"description": "Choose target",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"abductors",
								"abs",
								"adductors",
								"biceps",
								"calves",
								"cardiovascular system",
								"delts",
								"forearms",
								"glutes",
								"hamstrings",
								"lats",
								"levator scapulae",
								"pectorals",
								"quads",
								"serratus anterior",
								"spine",
								"traps",
								"triceps",
								"upper back"
							]
						}
					},
					{
						"name": "page",
						"in": "query",
						"description": "Page number",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "limit",
						"in": "query",
						"description": "Number of exercises per page",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				],
				"security": [{ "Bearer": [] }],
				"requestBody": {},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ExercisesResponse"
								}
							}
						}
					},
					"404": {
						"description": "Exercises not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ExercisesErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/exercises/current/{exerciseId}": {
			"get": {
				"tags": ["Training"],
				"summary": "Returns exercise by ID",
				"parameters": [
					{
						"name": "exerciseId",
						"in": "path",
						"description": "ID current exercise",
						"required": true,
						"schema": {
							"type": "string",
							"example": "64f2458d6f67bc34bae4f7f7"
						}
					}
				],
				"security": [{ "Bearer": [] }],
				"requestBody": {},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CurrentExerciseResponse"
								}
							}
						}
					},
					"404": {
						"description": "Exercise not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CurrentExerciseErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/exercises/categories": {
			"get": {
				"tags": ["Training"],
				"summary": "Returns all categories of exercises",
				"parameters": [
					{
						"name": "category",
						"in": "query",
						"description": "Choose category of exercises",
						"required": true,
						"schema": {
							"type": "string",
							"enum": ["Body parts", "Equipment", "Muscles"]
						}
					}
				],
				"security": [{ "Bearer": [] }],
				"requestBody": {},
				"responses": {
					"200": {
						"description": "OK",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CategoriesResponse"
								}
							}
						}
					},
					"404": {
						"description": "Exercises not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/CategoriesErrorResponse"
								}
							}
						}
					}
				}
			}
		},
		"/statistics": {
            "get": {
                "tags": [
                    "Statistics"
                ],
                "summary": "Basic statistic",
                "responses": {
                    "200": {
                        "description": "Operation successful",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/BasicStatisticResponse"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Not found"
                    }
                }
            }
        }
	},
	"components": {
		"schemas": {
			"RegistrationRequest": {
				"type": "object",
				"required": ["email", "password", "name"],
				"properties": {
					"name": {
						"type": "string",
						"description": "User's name",
						"example": "Oleks"
					},
					"email": {
						"type": "string",
						"description": "User's email",
						"format": "email",
						"pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/"
					},
					"password": {
						"type": "string",
						"description": "User's password",
						"minLength": "6",
						"maxLength": "15",
						"example": "qwerty123"
					}
				}
			},
			"registrationResponse": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string",
						"required": true,
						"description": "User's authentitication token"
					},
					"user": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string",
								"description": "User's display name",
								"example": "Oleks"
							},
							"email": {
								"type": "string",
								"required": true,
								"description": "User's email",
								"pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/",
								"example": "oleks@gmail.com"
							},
							"avatarURL": {
								"type": "string",
								"description": "User's avatar URL",
								"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=50"
							},
							"avatarLargeURL": {
								"type": "string",
								"description": "User's avatar URL",
								"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=200"
							}
						}
					}
				}
			},
			"LoginRequest": {
				"type": "object",
				"required": ["email", "password"],
				"properties": {
					"email": {
						"type": "string",
						"required": true,
						"description": "User's email",
						"format": "email",
						"pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/",
						"example": "oleks@gmail.com"
					},
					"password": {
						"type": "string",
						"description": "User's password",
						"minLength": "6",
						"maxLength": "15",
						"example": "qwerty123"
					}
				}
			},
			"LoginResponse": {
				"type": "object",
				"properties": {
					"token": {
						"type": "string",
						"required": true,
						"description": "User's authentitication token"
					},
					"user": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string",
								"description": "User's display name",
								"example": "Oleks"
							},
							"email": {
								"type": "string",
								"required": true,
								"description": "User's email",
								"pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/",
								"example": "oleks@gmail.com"
							},
							"avatarURL": {
								"type": "string",
								"description": "User's avatar URL",
								"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=50"
							},
							"avatarLargeURL": {
								"type": "string",
								"description": "User's avatar URL",
								"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=200"
							},
							"createdAt": {
								"type": "string",
								"description": "Date of creation",
								"format": "date"
							}
						}
					}
				}
			},

			"CurrentUserResponse": {
				"type": "object",
				"properties": {
					"name": {
						"type": "string",
						"description": "User's display name",
						"example": "Oleks"
					},
					"email": {
						"type": "string",
						"required": true,
						"description": "User's email",
						"pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/",
						"example": "oleks@gmail.com"
					},
					"avatarURL": {
						"type": "string",
						"description": "User's avatar URL",
						"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=50"
					},
					"avatarLargeURL": {
						"type": "string",
						"description": "User's avatar URL",
						"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=200"
					},
					"createdAt": {
						"type": "string",
						"description": "Date of creation",
						"format": "date"
					},
					"targetBmr": {
						"type": "number",
						"description": "User's target callories"
					},
					"targetTime": {
						"type": "number",
						"description": "User's target traning time"
					}
				}
			},
			"UpdateUserRequest": {
				"type": "object",
				"required": ["name"],
				"properties": {
					"name": {
						"type": "string",
						"description": "User's display name"
					}
				}
			},
			"UpdateUserResponse": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string"
					},
					"name": {
						"type": "string",
						"description": "User's display name",
						"example": "Oleks"
					},
					"email": {
						"type": "string",
						"required": true,
						"description": "User's email",
						"pattern": "/^w+@[a-zA-Z_]+?.[a-zA-Z]{2,3}$/",
						"example": "oleks@gmail.com"
					},
					"avatarURL": {
						"type": "string",
						"description": "User's avatar URL",
						"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=50"
					},
					"avatarLargeURL": {
						"type": "string",
						"description": "User's avatar URL",
						"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=200"
					}
				}
			},
			"UpdateUserAvatarRequest": {
				"type": "object",
				"properties": {
					"avatar": {
						"type": "string",
						"format": "binary"
					}
				}
			},
			"UpdateUserAvatarResponse": {
				"type": "object",
				"properties": {
					"avatarURL": {
						"type": "string",
						"description": "User's avatar URL",
						"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=50"
					},
					"avatarLargeURL": {
						"type": "string",
						"description": "User's avatar URL",
						"example": "http://www.gravatar.com/avatar/e4102cc7a5201c8dd9f198cdcb3cfc6c?s=200"
					}
				}
			},
			"UserProfileRequest": {
				"type": "object",
				"required": [
					"height",
					"currentWeight",
					"desiredWeight",
					"sex",
					"blood",
					"levelActivity",
					"birthday"
				],
				"properties": {
					"height": {
						"type": "number",
						"description": "User's height",
						"minimum": 150,
						"maximum": 210
					},
					"currentWeight": {
						"type": "number",
						"description": "User's weight",
						"minimum": 40,
						"maximum": 160
					},
					"desiredWeight": {
						"type": "number",
						"description": "User's target weihgt",
						"minimum": 40,
						"maximum": 160
					},
					"sex": {
						"type": "string",
						"description": "User's gender",
						"enum": ["male", "female"]
					},
					"blood": {
						"type": "number",
						"description": "User's blood type",
						"enum": [1, 2, 3, 4]
					},
					"levelActivity": {
						"type": "number",
						"description": "User's blood type",
						"enum": [1, 2, 3, 4, 5]
					},
					"birthday": {
						"type": "string",
						"description": "User's birthday",
						"format": "date"
					}
				}
			},
			"UserProfileResponse": {
				"anyOf": [
					{
						"type": "object",
						"properties": {
							"_id": {
								"type": "string"
							},
							"height": {
								"type": "number",
								"description": "User's height"
							},
							"currentWeight": {
								"type": "number",
								"description": "User's weight"
							},
							"desiredWeight": {
								"type": "number",
								"description": "User's target weihgt"
							},
							"sex": {
								"type": "string",
								"description": "User's gender",
								"enum": ["male", "female"]
							},
							"blood": {
								"type": "number",
								"description": "User's blood type",
								"enum": [1, 2, 3, 4]
							},
							"levelActivity": {
								"type": "number",
								"description": "User's blood type",
								"enum": [1, 2, 3, 4, 5]
							},
							"birthday": {
								"type": "string",
								"description": "User's birthday",
								"format": "date"
							},
							"bmr": {
								"type": "number",
								"description": "Callories of the user"
							},
							"owner": {
								"type": "object",
								"$ref": "#/components/schemas/UpdateUserResponse"
							}
						}
					},
					{
						"type": "null"
					}
				]
			},
			"DiaryResponse": {
				"type": "object",
				"properties": {
				  "diary": {
					"type": "object",
					"properties": {
					  "_id": {
						"type": "string"
					  },
					  "date": {
						"type": "string",
						"format": "date"
					  },
					  "user": {
						"type": "string"
					  },
					  "__v": {
						"type": "integer"
					  },
					  "exercises": {
						"type": "array",
						"items": {
						  "$ref": "#/components/schemas/Exercise"
						}
					  },
					  "products": {
						"type": "array",
						"items": {
						  "$ref": "#/components/schemas/Product"
						}
					  }
					}
				  }
				}
			  },
			  "Exercise": {
				"type": "object",
				"properties": {
				  "exerciseId": {
					"type": "object",
					"properties": {
					  "_id": {
						"type": "string"
					  },
					  "bodyPart": {
						"type": "string"
					  },
					  "equipment": {
						"type": "string"
					  },
					  "name": {
						"type": "string"
					  },
					  "target": {
						"type": "string"
					  },
					  "burnedCalories": {
						"type": "integer"
					  },
					  "time": {
						"type": "integer"
					  }
					}
				  },
				  "time": {
					"type": "integer"
				  },
				  "burnedCalories": {
					"type": "number"
				  },
				  "_id": {
					"type": "string"
				  }
				}
			  },
			  "Product": {
				"type": "object",
				"properties": {
				  "productId": {
					"type": "object",
					"properties": {
					  "_id": {
						"type": "string"
					  },
					  "weight": {
						"type": "integer"
					  },
					  "calories": {
						"type": "integer"
					  },
					  "category": {
						"type": "string"
					  },
					  "title": {
						"type": "string"
					  }
					}
				  },
				  "amount": {
					"type": "integer"
				  },
				  "calories": {
					"type": "number"
				  },
				  "_id": {
					"type": "string"
				  }
				}
			  },
			  "DiaryEntryRequest": {
				"type": "object",
				"required": [
				  "userId",
				  "date"
				],
				"properties": {
				  "userId": {
					"type": "string"
				  },
				  "date": {
					"type": "string",
					"format": "date"
				  },
				  "productData": {
					"type": "object",
					"properties": {
					  "productId": {
						"type": "string"
					  },
					  "amount": {
						"type": "integer"
					  }
					}
				  },
				  "exerciseData": {
					"type": "object",
					"properties": {
					  "exerciseId": {
						"type": "string"
					  },
					  "time": {
						"type": "integer"
					  }
					}
				  }
				}
			  },
			  "DeleteEntryRequest": {
				"type": "object",
				"required": [
				  "userId",
				  "date",
				  "entryId"
				],
				"properties": {
				  "userId": {
					"type": "string"
				  },
				  "date": {
					"type": "string",
					"format": "date"
				  },
				  "entryId": {
					"type": "string"
				  }
				}
			  },
			"FoodItemSchema": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string",
						"description": "Id",
						"example": "5d5169111111173622ff5773"
					},
					"weight": {
						"type": "integer",
						"description": "Weight",
						"example": "100"
					},
					"calories": {
						"type": "integer",
						"description": "Calories",
						"example": "340"
					},
					"category": {
						"type": "integer",
						"description": "Category",
						"example": "dairy"
					},
					"title": {
						"type": "integer",
						"description": "Title",
						"example": "Danbo cheese"
					},
					"groupBloodNotAllowed": {
						"type": "object",
						"properties": {
							"1": {
								"type": "boolean",
								"example": "true"
							},
							"2": {
								"type": "boolean",
								"example": "true"
							},
							"3": {
								"type": "boolean",
								"example": "false"
							},
							"4": {
								"type": "boolean",
								"example": "false"
							}
						}
					}
				}
			},
			"FoodResponse": {
				"type": "object",
				"properties": {
					"total": {
						"type": "integer",
						"description": "Number of foods",
						"example": "2621"
					},
					"page": {
						"type": "integer",
						"description": "Current page",
						"example": "1"
					},
					"limit": {
						"type": "integer",
						"description": "Current limit of elements per page",
						"example": "1"
					},
					"data": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/FoodItemSchema"
						}
					}
				}
			},
			"FoodResponse404": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"example": "Foods not found"
					}
				}
			},
			"CategoriesFoodResponse": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string",
						"description": "Id",
						"example": "5d5169111111173622ff5773"
					},
					"label": {
						"type": "integer",
						"description": "Label",
						"example": "meat"
					}
				}
			},
			"CategoriesFoodResponse404": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"example": "Categories not found"
					}
				}
			},
			"CategoriesFoodResponse400": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"example": "Unacceptable category"
					}
				}
			},
			"UnauthorizedResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"example": "Unauthorized"
					}
				}
			},
			"ExercisesResponse": {
				"type": "object",
				"properties": {
					"total": {
						"type": "number",
						"example": 1324
					},
					"page": {
						"type": "number",
						"example": 1
					},
					"limit": {
						"type": "number",
						"example": 16
					},
					"data": {
						"type": "object",
						"properties": {
							"_id": {
								"type": "string",
								"description": "Exercise ID",
								"example": "64f2458d6f67bc34bae4f950"
							},
							"bodyPart": {
								"type": "string",
								"description": "Body part",
								"example": "upper arms"
							},
							"equipment": {
								"type": "string",
								"description": "Equipment",
								"example": "dumbbell"
							},
							"gifUrl": {
								"type": "string",
								"description": "URL to the example gif",
								"example": "https://ftp.goit.study/img/power-pulse/gifs/0397.gif"
							},
							"name": {
								"type": "string",
								"description": "Exercise name",
								"example": "dumbbell seated neutral wrist curl"
							},
							"target": {
								"type": "string",
								"description": "Target of exercise",
								"example": "biceps"
							},
							"burnedCalories": {
								"type": "number",
								"description": "Burns calories",
								"example": 337
							},
							"time": {
								"type": "number",
								"description": "Time of the exercise",
								"example": 3
							}
						}
					}
				}
			},
			"ExercisesErrorResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"example": "Exercises not found"
					}
				}
			},
			"CurrentExerciseResponse": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string",
						"description": "Exercise ID",
						"example": "64f2458d6f67bc34bae4f7f7"
					},
					"bodyPart": {
						"type": "string",
						"description": "Body part",
						"example": "chest"
					},
					"equipment": {
						"type": "string",
						"description": "Equipment",
						"example": "leverage machine"
					},
					"gifUrl": {
						"type": "string",
						"description": "URL to the example gif",
						"example": "https://ftp.goit.study/img/power-pulse/gifs/0009.gif"
					},
					"name": {
						"type": "string",
						"description": "Exercise name",
						"example": "assisted chest dip (kneeling)"
					},
					"target": {
						"type": "string",
						"description": "Target of exercise",
						"example": "pectorals"
					},
					"burnedCalories": {
						"type": "number",
						"description": "Burns calories",
						"example": 329
					},
					"time": {
						"type": "number",
						"description": "Time of the exercise",
						"example": 3
					}
				}
			},
			"CurrentExerciseErrorResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"example": "Exercise not found"
					}
				}
			},
			"CategoriesResponse": {
				"type": "object",
				"properties": {
					"total": {
						"type": "number",
						"example": 28
					},
					"page": {
						"type": "number",
						"example": 1
					},
					"limit": {
						"type": "number",
						"example": 10
					},
					"data": {
						"type": "object",
						"properties": {
							"_id": {
								"type": "string",
								"description": "Category ID",
								"example": "650f35ece3f5522fc6396293"
							},
							"filter": {
								"type": "string",
								"description": "filter of category",
								"example": "Equipment"
							},
							"name": {
								"type": "string",
								"description": "name of equipment",
								"example": "assisted"
							},
							"imgURL": {
								"type": "string",
								"description": "URL to the example image",
								"example": "https://ftp.goit.study/img/power-pulse/filters/assisted_gukduh.jpg"
							}
						}
					}
				}
			},
			"CategoriesErrorResponse": {
				"type": "object",
				"properties": {
					"message": {
						"type": "string",
						"example": "Categories not found"
					}
				}
			},
			"BasicStatisticResponse": {
                "type": "object",
                "properties": {
                    "userCount": {
                        "type": "integer"
                    },
                    "workoutCount": {
                        "type": "integer"
                    },
                    "burnedCaloriesSum": {
                        "type": "number"
                    },
                    "workoutsTimeSum": {
                        "type": "number"
                    }
                }
            }
        },
		"securitySchemes": {
			"Bearer": {
				"type": "http",
				"scheme": "bearer",
				"bearerFormat": "JWT"
			}
		}
	}
}
